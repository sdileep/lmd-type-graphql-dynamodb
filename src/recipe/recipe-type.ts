import { Field, ObjectType, Int, Float } from 'type-graphql'
import {
  attribute,
  hashKey,
  // autoGeneratedHashKey,
  rangeKey,
  table,
} from '@aws/dynamodb-data-mapper-annotations'

@table('Recipes')
@ObjectType({ description: 'Object representing cooking recipe' })
export class Recipe {
  // @autoGeneratedHashKey()
  @hashKey()
  pk: string

  @rangeKey()
  sk: string

  @Field()
  @attribute()
  title: string

  @Field()
  @attribute()
  id: string

  @Field(type => String, { nullable: true, deprecationReason: 'Use `description` field instead' })
  @attribute()
  get specification(): string | undefined {
    return this.description
  }

  @Field({ nullable: true, description: 'The recipe description with preparation info' })
  @attribute()
  description?: string

  @Field(type => [Int])
  @attribute()
  ratings: number[]

  @Field()
  @attribute()
  creationDate: Date

  @Field(type => Int)
  @attribute()
  ratingsCount: number

  @Field(type => Float, { nullable: true })
  get averageRating(): number | null {
    const ratingsCount = this.ratings.length
    if (ratingsCount === 0) {
      return null
    }
    const ratingsSum = this.ratings.reduce((a, b) => a + b, 0)
    return ratingsSum / ratingsCount
  }
}
